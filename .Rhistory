library(readr)
library(tidyverse)
library(rstanarm)
library(dplyr)
library(tidymodels)
minwage <- read.csv("raw_data/nj_minwage.csv")
# Use stan_glm to fit the model, it is a standard generalized linear regression.
# lm is an older function
# Use set seed to ensure results can be replicated
set.seed(10)
minwage_mod <- stan_glm(data = minwage,
formula = fte ~ nj + d + nj*d,
refresh = 0)
print(minwage_mod, digits = 3)
# Organize the data, split it into training set and testing set
# Draw code from Chapter 10 Primer
set.seed(10)
minwage_split <- initial_split(minwage, prob = 0.80)
minwage_train <- training(minwage_split)
minwage_test <- testing(minwage_split)
# Set dummy variable, dummy = 0 if false, 1 if true.
minwage_recipe <-
recipe(fte ~ nj + d, data = minwage_train) %>%
step_dummy(all_nominal()) %>%
step_interact(~ nj:d)
# Telling the model that it is a linear regression
# Workflow = set of instructions for the model
# Workflow is similar to stan_glm in which you would specify a formula
lm_model <-
linear_reg() %>%
set_engine("lm")
lm_wflow <-
workflow() %>%
add_model(lm_model)
# Recipe specifies what should be done further
# Recipe adds the formula
lm_wflow <- lm_wflow %>%
add_recipe(minwage_recipe)
lm_fit <- fit(lm_wflow, minwage_train)
prediction_results <- predict(lm_fit, new_data = minwage_test) %>%
bind_cols(minwage_test %>% select(fte)) %>%
summarize(error = sqrt(mean((fte - .pred)^2, na.rm = TRUE)))
prediction_results
# Utilize code from question 5 for the first chunk
# USe prediction_results from q5, fit data to minwage_train
# Necessary to include slice within the function rather than outside the function
# Clean the tibble by renaming the column
estimate_error <- function(df, test_recipe) {
set.seed(10)
minwage_split <- initial_split(df, prob = 0.80)
minwage_train <- training(minwage_split)
minwage_test <- testing(minwage_split)
minwage_folds <- vfold_cv(minwage_train)
minwage_workflow <- workflow() %>%
add_model(linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")) %>%
add_recipe((test_recipe))
prediction_results <- minwage_workflow %>%
fit(data = minwage_train) %>%
predict(new_data = minwage_test) %>%
bind_cols(minwage_test %>% select(fte)) %>%
metrics(truth = fte, estimate = .pred) %>%
slice(1) %>%
select(.estimate) %>%
rename(error = .estimate)
prediction_results
}
# Use estimate_error function to give estimates
# Combine southj and centralj with + for pred_error_2
pred_error_1 <- estimate_error(minwage, (recipe(fte ~ d + nj, data = minwage_train) %>%
step_interact( ~ nj:d)))
pred_error_2 <- estimate_error(minwage, (recipe(fte ~ d + nj + southj + centralj,
data = minwage_train) %>%
step_interact( ~ nj:d)))
pred_error_1
pred_error_2
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rstanarm)
library(ggridges)
library(gtsummary)
library(broom.mixed)
library(gt)
data <- read.csv("raw_data/dw_nominate.csv") %>%
filter(!chamber == "President")
#include an ! before chamber, this removes rows with the value specified
#use a case_when to rename the original party_code values, if it is neither, then it defaults to Other
#rather than use substr(-c) to remove unwanted columns, select them
congress_1947 <- data %>%
filter(congress >= 80) %>%
mutate(party = case_when(party_code == 100 ~ "D",
party_code == 200 ~ "R",
TRUE ~ "Other")) %>%
select(congress, chamber, bioname, party, born, died, nominate_dim1, nominate_dim2)
#filter for when the Congresses are the 90th or above and make sure to just include the Democrats and Republicans in the dataset.
#use drop_na to get rid of the N/A values in the data
q2 <- congress_1947 %>%
filter(congress >= 90) %>%
filter(party %in% c("D", "R")) %>%
mutate(congress = as.factor(congress)) %>%
drop_na(nominate_dim1)
#geom_density_ridges creates the ridge look, good for showing concentration
#there is some party overlap in ideologies, with polarization becoming more apparent as we near current times
#use alpha to specify transparency in the colors
q2 %>%
ggplot(aes(x = nominate_dim1, y = congress, fill = party)) +
geom_density_ridges(bandwidth = .05, alpha = 0.7) +
labs(title = "Ideological Distribution of Members of Congress since 1967",
x = "Liberal to Conservative",
y = "Congress") +
scale_fill_manual(values = c("blue", "red"), labels = c("D", "R"), name = "Party") +
theme_bw()
congress_115 <- congress_1947 %>%
filter(congress == 115) %>%
mutate(party = recode(party, "Other" = "D")) %>%
mutate(dim1_percentile = (percent_rank(nominate_dim1) * 100))
set.seed(10)
#use set seed to randomly generate 10 samples
#family = gaussian() is default for stan_glm, not necessary
dim1_model <- stan_glm(data = congress_115, dim1_percentile ~ party -1, refresh = 0)
#pulling data from the chapter to create the regression table
dim1_model %>%
tbl_regression() %>%
as_gt() %>%
gt::tab_source_note(gt::md("Source: https://voteview.com/data")) %>%
tab_header(title = "Regression of Congressional Ideology",
subtitle = "The Effect of Party on DW-NOMINATE Percentile")
dim1_model
new_obs <- tibble(party = c("D", "R"))
#create new tibble with columns only Democrat and Republican
#create a posterior prediction based on model from previous question
#rename columns to D and R to make them easier to ID, combine with a pivot_longer
dim1_posterior <- posterior_predict(dim1_model, newdata = new_obs)
dim1_posterior %>%
as_tibble() %>%
mutate_all(as.numeric) %>%
rename(D = 1, R = 2) %>%
pivot_longer(cols = D:R,
names_to = "party",
values_to = "dim1_percentile") %>%
ggplot(aes(x = dim1_percentile, fill = party)) +
geom_histogram(aes(y = after_stat(count/sum(count))),
alpha = 0.7,
bins = 100,
color = "white",
position = "identity") +
scale_fill_manual(values = c("blue1", "red1"),
name = "Party") +
theme_bw() +
scale_y_continuous(labels = scales::percent_format()) +
scale_x_continuous(breaks = c(0, 25, 50, 75, 100)) +
labs(title = "Posterior Distribution for DW-Nominate Percentile",
x = "Percentile",
y = "Proportion")
#utilize code from above to setup function
#determine likelihood of being over median, since median = 50, set >=
#create a new variable: mean_above_median to determine likelihood of party member being above the median value
#multiple by 100 to change into percentage
initialq4 <- dim1_posterior %>%
as_tibble() %>%
mutate_all(as.numeric) %>%
rename(D = 1, R = 2) %>%
pivot_longer(cols = D:R,
names_to = "party",
values_to = "dim1_percentile") %>%
mutate(above_median = ifelse(dim1_percentile >= 50, TRUE, FALSE)) %>%
group_by(party) %>%
summarize(mean_above_median = (sum(above_median)/n()) * 100, .groups = "keep")
initialq4
#use posterior_distribution summarize to
View(data)
#Add variables as columns to dataframe
#Sleep
sleep <- time %>%
ungroup() %>%
filter(tiercode == 10101)
a <- left_join(table, sleep, by = c("tucaseid")) %>%
mutate(sleep = dur)
a = subset(a, select = -c(tiercode, dur))
#Housework
housework <- time %>%
ungroup() %>%
filter(between(tiercode, 20101, 20199))
b <- left_join(a, housework, by = c("tucaseid")) %>%
mutate(housework = dur)
b = subset(b, select = -c(tiercode, dur))
#Telephone
phonetime <- time %>%
ungroup() %>%
filter(between(tiercode, 160101, 169989))
c <- left_join(b, phonetime, by = c("tucaseid")) %>%
mutate(phonetime = dur)
c = subset(c, select = -c(tiercode, dur))
#Volunteer
volunteer <- time %>%
ungroup() %>%
filter(between(tiercode, 150101, 159989))
d <- left_join(c, volunteer, by = c("tucaseid")) %>%
mutate(volunteer = dur)
d = subset(d, select = -c(tiercode, dur))
#Playing Sports
sports <- time %>%
ungroup() %>%
filter(between(tiercode, 130101, 130199))
e <- left_join(d, sports, by = c("tucaseid")) %>%
mutate(sports = dur)
e = subset(e, select = -c(tiercode, dur))
#Religious Activities
religion <- time %>%
ungroup() %>%
filter(between(tiercode, 140101, 149999))
f <- left_join(e, religion, by = c("tucaseid")) %>%
mutate(religion = dur)
f = subset(f, select = -c(tiercode, dur))
#Eating Meals
eating <- time %>%
ungroup() %>%
filter(between(tiercode, 110101, 119999))
g <- left_join(f, eating, by = c("tucaseid")) %>%
mutate(eating = dur)
g = subset(g, select = -c(tiercode, dur))
#Shopping
shopping <- time %>%
ungroup() %>%
filter(between(tiercode, 70101, 70199))
h <- left_join(g, shopping, by = c("tucaseid")) %>%
mutate(shopping = dur)
h = subset(h, select = -c(tiercode, dur))
#Research and Homework
research_homework <- time %>%
ungroup() %>%
filter(between(tiercode, 60301, 60399))
i <- left_join(h, research_homework, by = c("tucaseid")) %>%
mutate(research_homework = dur)
i = subset(i, select = -c(tiercode, dur))
#Classtime
class <- time %>%
ungroup() %>%
filter(between(tiercode, 60101, 60199))
j <- left_join(i, class, by = c("tucaseid")) %>%
mutate(class = dur)
j = subset(j, select = -c(tiercode, dur))
#Working
working <- time %>%
ungroup() %>%
filter(between(tiercode, 50101, 59999))
k <- left_join(j, working, by = c("tucaseid")) %>%
mutate(working = dur)
k = subset(k, select = -c(tiercode, dur))
#Socializing
socialevents <- time %>%
ungroup() %>%
filter(between(tiercode, 120201, 120299 | 129999))
l <- left_join(k, socialevents, by = c("tucaseid")) %>%
mutate(socialevents = dur)
l = subset(l, select = -c(tiercode, dur))
#Television
tv <- time %>%
ungroup() %>%
filter(between(tiercode, 120303, 120304))
m <- left_join(l, tv, by = c("tucaseid")) %>%
mutate(tv = dur)
m = subset(m, select = -c(tiercode, dur))
#Drug Use
druguse <- time %>%
ungroup() %>%
filter(tiercode == 120302)
n <- left_join(m, tv, by = c("tucaseid")) %>%
mutate(druguse = dur)
n = subset(n, select = -c(tiercode, dur))
#Computer Usage
computeruse <- time %>%
ungroup() %>%
filter(tiercode == 120308)
o <- left_join(n, computeruse, by = c("tucaseid")) %>%
mutate(computeruse = dur)
o = subset(o, select = -c(tiercode, dur))
#Get rid of duplicate rows
data <- o %>%
distinct()
data <- data[!duplicated(data$tucaseid), ]
#Change N/A variables to value of 0
data$sleep[which(is.na(data$sleep))] <- 0
data$housework[which(is.na(data$housework))] <- 0
data$phonetime[which(is.na(data$phonetime))] <- 0
data$volunteer[which(is.na(data$volunteer))] <- 0
data$sports[which(is.na(data$sports))] <- 0
data$religion[which(is.na(data$religion))] <- 0
data$eating[which(is.na(data$eating))] <- 0
data$shopping[which(is.na(data$shopping))] <- 0
data$research_homework[which(is.na(data$research_homework))] <- 0
data$class[which(is.na(data$class))] <- 0
data$working[which(is.na(data$working))] <- 0
data$tv[which(is.na(data$tv))] <- 0
data$computeruse[which(is.na(data$computeruse))] <- 0
data$druguse[which(is.na(data$druguse))] <- 0
#Change min to hours
data$sleep <- data$sleep / 60
data$housework <- data$housework / 60
data$phonetime <- data$phonetime / 60
data$volunteer <- data$volunteer / 60
data$sports <- data$sports / 60
data$religion <- data$religion / 60
data$eating <- data$eating / 60
data$shopping <- data$shopping / 60
data$research_homework <- data$research_homework / 60
data$class <- data$class / 60
data$working <- data$working / 60
data$tv <- data$tv / 60
data$computeruse <- data$computeruse / 60
data$druguse <- data$druguse / 60
View(data)
data%>%
ggplot(aes(x = sleep)) +
geom_histogram() +
facet_wrap(~ famincome)
data%>%
ggplot(aes(x = sleep)) +
geom_histogram() +
facet_wrap(~ famincome) +
theme(axis.text = element_text(size = 5), strip.text = element_text(size = 7),
panel.grid = element_blank(), panel.spacing.x = unit(3, "mm"),
axis.ticks = element_blank(), axis.ticks.y = element_blank())
data%>%
ggplot(aes(x = sleep)) +
geom_histogram() +
facet_wrap(~ famincome) +
theme(axis.text = element_text(size = 5), strip.text = element_text(size = 7),
panel.grid = element_blank(), panel.spacing.x = unit(3, "mm"),
axis.ticks = element_blank(), axis.ticks.y = element_blank()) +
labs(title = "Distribution of Hours Slept Based on Income",
subtitle = "Determining the distribution of hours slept based on family income from survey responses 2012-2016",
x = "Hours Slept",
y = "")
europepolicy <- read.csv("raw_data/caugheyEtAl2019.csv")
# Get rid of rows containing N/A data values
europepolicy <- na.omit(europepolicy)
# Replication of plot
# When using axis.text, ensure to use element_text around size arguments
# Utilize nrow() argument in facet_wrap to change display of graphs
# Able to use theme() twice to edit text and remove ticks
# Caption displays the lower left-hand side text
europepolicy %>%
ggplot(aes(x = year, y = immigration)) +
facet_wrap(~country, nrow = 3) +
geom_point(size = .5) +
geom_line() +
theme_linedraw() +
theme(axis.text = element_text(size = 5), strip.text = element_text(size = 7),
panel.grid = element_blank(), panel.spacing.x = unit(3, "mm"),
axis.ticks = element_blank(), axis.ticks.y = element_blank()) +
geom_hline(yintercept = 0, col = "darkblue", lty = "dashed") +
scale_x_continuous(name = "Year", labels = c("1989", "", "", "", "", "2015")) +
labs(title = "Estimated Conservatism on Immigration Policy",
subtitle = "27 European Countries: 1989 - 2015",
y = "Estimated Immigration Conservatism",
x = "Year",
caption = "Source: Caughey et al. 2019")
devtools::install_github('Mikata-Project/ggthemr')
devtools::install_github('Mikata-Project/ggthemr')
install_github('Mikata-Project/ggthemr')
install.packages("ggthemr")
data%>%
ggplot(aes(x = sleep)) +
geom_histogram(fill = sleep) +
facet_wrap(~ famincome) +
theme(axis.text = element_text(size = 5), strip.text = element_text(size = 7),
panel.grid = element_blank(), panel.spacing.x = unit(3, "mm"),
axis.ticks = element_blank(), axis.ticks.y = element_blank()) +
labs(title = "Distribution of Hours Slept Based on Income",
subtitle = "Determining the distribution of hours slept based on family income from survey responses 2012-2016",
x = "Hours Slept",
y = "",
caption = "Source: ATUS data") +
theme
data%>%
ggplot(aes(x = sleep, fill = sleep)) +
geom_histogram() +
facet_wrap(~ famincome) +
theme(axis.text = element_text(size = 5), strip.text = element_text(size = 7),
panel.grid = element_blank(), panel.spacing.x = unit(3, "mm"),
axis.ticks = element_blank(), axis.ticks.y = element_blank()) +
labs(title = "Distribution of Hours Slept Based on Income",
subtitle = "Determining the distribution of hours slept based on family income from survey responses 2012-2016",
x = "Hours Slept",
y = "",
caption = "Source: ATUS data") +
theme
data%>%
ggplot(aes(x = sleep)fill = sleep) +
data%>%
ggplot(aes(x = sleep, fill = famincome)) +
geom_histogram() +
facet_wrap(~ famincome) +
theme(axis.text = element_text(size = 5), strip.text = element_text(size = 7),
panel.grid = element_blank(), panel.spacing.x = unit(3, "mm"),
axis.ticks = element_blank(), axis.ticks.y = element_blank()) +
labs(title = "Distribution of Hours Slept Based on Income",
subtitle = "Determining the distribution of hours slept based on family income from survey responses 2012-2016",
x = "Hours Slept",
y = "",
caption = "Source: ATUS data") +
theme
data%>%
ggplot(aes(x = sleep, fill = "green")) +
geom_histogram() +
facet_wrap(~ famincome) +
theme(axis.text = element_text(size = 5), strip.text = element_text(size = 7),
panel.grid = element_blank(), panel.spacing.x = unit(3, "mm"),
axis.ticks = element_blank(), axis.ticks.y = element_blank()) +
labs(title = "Distribution of Hours Slept Based on Income",
subtitle = "Determining the distribution of hours slept based on family income from survey responses 2012-2016",
x = "Hours Slept",
y = "",
caption = "Source: ATUS data") +
theme
data%>%
ggplot(aes(x = sleep, fill = "green")) +
geom_histogram() +
facet_wrap(~ famincome) +
theme(axis.text = element_text(size = 5), strip.text = element_text(size = 7),
panel.grid = element_blank(), panel.spacing.x = unit(3, "mm"),
axis.ticks = element_blank(), axis.ticks.y = element_blank()) +
labs(title = "Distribution of Hours Slept Based on Income",
subtitle = "Determining the distribution of hours slept based on family income from survey responses 2012-2016",
x = "Hours Slept",
y = "",
caption = "Source: ATUS data")
data%>%
ggplot(aes(x = sleep, fill = sleep)) +
geom_histogram() +
facet_wrap(~ famincome) +
theme(axis.text = element_text(size = 5), strip.text = element_text(size = 7),
panel.grid = element_blank(), panel.spacing.x = unit(3, "mm"),
axis.ticks = element_blank(), axis.ticks.y = element_blank()) +
labs(title = "Distribution of Hours Slept Based on Income",
subtitle = "Determining the distribution of hours slept based on family income from survey responses 2012-2016",
x = "Hours Slept",
y = "",
caption = "Source: ATUS data")
data%>%
ggplot(aes(x = sleep, fill = sleep)) +
geom_histogram(binwidth = 24) +
facet_wrap(~ famincome) +
theme(axis.text = element_text(size = 5), strip.text = element_text(size = 7),
panel.grid = element_blank(), panel.spacing.x = unit(3, "mm"),
axis.ticks = element_blank(), axis.ticks.y = element_blank()) +
labs(title = "Distribution of Hours Slept Based on Income",
subtitle = "Determining the distribution of hours slept based on family income from survey responses 2012-2016",
x = "Hours Slept",
y = "",
caption = "Source: ATUS data")
data%>%
ggplot(aes(x = sleep, fill = sleep)) +
geom_histogram() +
facet_wrap(~ famincome) +
theme(axis.text = element_text(size = 5), strip.text = element_text(size = 7),
panel.grid = element_blank(), panel.spacing.x = unit(3, "mm"),
axis.ticks = element_blank(), axis.ticks.y = element_blank()) +
labs(title = "Distribution of Hours Slept Based on Income",
subtitle = "Determining the distribution of hours slept based on family income from survey responses 2012-2016",
x = "Hours Slept",
y = "",
caption = "Source: ATUS data")
data%>%
ggplot(aes(x = sleep, fill = count)) +
geom_histogram() +
facet_wrap(~ famincome) +
theme(axis.text = element_text(size = 5), strip.text = element_text(size = 7),
panel.grid = element_blank(), panel.spacing.x = unit(3, "mm"),
axis.ticks = element_blank(), axis.ticks.y = element_blank()) +
labs(title = "Distribution of Hours Slept Based on Income",
subtitle = "Determining the distribution of hours slept based on family income from survey responses 2012-2016",
x = "Hours Slept",
y = "",
caption = "Source: ATUS data")
data%>%
ggplot(aes(x = sleep, fill = famincome)) +
geom_histogram() +
facet_wrap(~ famincome) +
theme(axis.text = element_text(size = 5), strip.text = element_text(size = 7),
panel.grid = element_blank(), panel.spacing.x = unit(3, "mm"),
axis.ticks = element_blank(), axis.ticks.y = element_blank()) +
labs(title = "Distribution of Hours Slept Based on Income",
subtitle = "Determining the distribution of hours slept based on family income from survey responses 2012-2016",
x = "Hours Slept",
y = "",
caption = "Source: ATUS data")
data%>%
ggplot(aes(x = sleep, fill = famincome)) +
geom_histogram() +
facet_wrap(~ famincome) +
theme(axis.text = element_text(size = 5), strip.text = element_text(size = 7),
panel.grid = element_blank(), panel.spacing.x = unit(3, "mm"),
axis.ticks = element_blank(), axis.ticks.y = element_blank()) +
labs(title = "Distribution of Hours Slept Based on Income",
subtitle = "Determining the distribution of hours slept based on family income from survey responses 2012-2016",
x = "Hours Slept",
y = "",
caption = "Source: ATUS data") +
theme_linedraw()
write.csv(data, "50proj/fullset.csv")
runApp('50proj')
runApp('50proj')
runApp('50proj')
runApp('50proj')
runApp('50proj')
runApp('50proj')
runApp('50proj')
runApp('50proj')
runApp('50proj')
